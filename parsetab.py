
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'AND ASSIGN DIVIDE ELSE ELSE IDENTIFIER IF IF LBRACE LPAREN MINUS MOD MULTIPLY NEGACION NUMBER OR PLUS PRINT PRINT RBRACE RPAREN STRINGstatement : IDENTIFIER ASSIGN expressionstatement : PRINT LPAREN expression RPARENstatement : IF LPAREN expression RPAREN LBRACE statements RBRACE\n                 | IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACEstatements : statement\n                  | statements statementexpression : NEGACION expression\n                  | expression AND expression\n                  | expression OR expressionexpression : expression PLUS expression\n                  | expression MINUS expression\n                  | expression MULTIPLY expression\n                  | expression DIVIDE expression\n                  | expression MOD expressionexpression : LPAREN expression RPARENexpression : NUMBERexpression : STRINGexpression : IDENTIFIER'
    
_lr_action_items = {'IDENTIFIER':([0,5,6,7,8,9,10,11,12,13,16,17,18,19,20,21,22,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,],[2,8,8,8,-18,-1,8,8,-16,-17,8,8,8,8,8,8,8,-7,-2,-8,-9,-10,-11,-12,-13,-14,-15,2,2,-5,-3,-6,2,2,-4,]),'PRINT':([0,8,9,12,13,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,],[3,-18,-1,-16,-17,-7,-2,-8,-9,-10,-11,-12,-13,-14,-15,3,3,-5,-3,-6,3,3,-4,]),'IF':([0,8,9,12,13,23,25,27,28,29,30,31,32,33,34,35,36,37,38,39,41,42,43,],[4,-18,-1,-16,-17,-7,-2,-8,-9,-10,-11,-12,-13,-14,-15,4,4,-5,-3,-6,4,4,-4,]),'$end':([1,8,9,12,13,23,25,27,28,29,30,31,32,33,34,38,43,],[0,-18,-1,-16,-17,-7,-2,-8,-9,-10,-11,-12,-13,-14,-15,-3,-4,]),'ASSIGN':([2,],[5,]),'LPAREN':([3,4,5,6,7,10,11,16,17,18,19,20,21,22,],[6,7,11,11,11,11,11,11,11,11,11,11,11,11,]),'NEGACION':([5,6,7,10,11,16,17,18,19,20,21,22,],[10,10,10,10,10,10,10,10,10,10,10,10,]),'NUMBER':([5,6,7,10,11,16,17,18,19,20,21,22,],[12,12,12,12,12,12,12,12,12,12,12,12,]),'STRING':([5,6,7,10,11,16,17,18,19,20,21,22,],[13,13,13,13,13,13,13,13,13,13,13,13,]),'AND':([8,9,12,13,14,15,23,24,27,28,29,30,31,32,33,34,],[-18,16,-16,-17,16,16,16,16,16,16,16,16,16,16,16,-15,]),'OR':([8,9,12,13,14,15,23,24,27,28,29,30,31,32,33,34,],[-18,17,-16,-17,17,17,17,17,17,17,17,17,17,17,17,-15,]),'PLUS':([8,9,12,13,14,15,23,24,27,28,29,30,31,32,33,34,],[-18,18,-16,-17,18,18,18,18,18,18,18,18,18,18,18,-15,]),'MINUS':([8,9,12,13,14,15,23,24,27,28,29,30,31,32,33,34,],[-18,19,-16,-17,19,19,19,19,19,19,19,19,19,19,19,-15,]),'MULTIPLY':([8,9,12,13,14,15,23,24,27,28,29,30,31,32,33,34,],[-18,20,-16,-17,20,20,20,20,20,20,20,20,20,20,20,-15,]),'DIVIDE':([8,9,12,13,14,15,23,24,27,28,29,30,31,32,33,34,],[-18,21,-16,-17,21,21,21,21,21,21,21,21,21,21,21,-15,]),'MOD':([8,9,12,13,14,15,23,24,27,28,29,30,31,32,33,34,],[-18,22,-16,-17,22,22,22,22,22,22,22,22,22,22,22,-15,]),'RBRACE':([8,9,12,13,23,25,27,28,29,30,31,32,33,34,36,37,38,39,42,43,],[-18,-1,-16,-17,-7,-2,-8,-9,-10,-11,-12,-13,-14,-15,38,-5,-3,-6,43,-4,]),'RPAREN':([8,12,13,14,15,23,24,27,28,29,30,31,32,33,34,],[-18,-16,-17,25,26,-7,34,-8,-9,-10,-11,-12,-13,-14,-15,]),'LBRACE':([26,40,],[35,41,]),'ELSE':([38,],[40,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'statement':([0,35,36,41,42,],[1,37,39,37,39,]),'expression':([5,6,7,10,11,16,17,18,19,20,21,22,],[9,14,15,23,24,27,28,29,30,31,32,33,]),'statements':([35,41,],[36,42,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> statement","S'",1,None,None,None),
  ('statement -> IDENTIFIER ASSIGN expression','statement',3,'p_statement_assign','parser.py',9),
  ('statement -> PRINT LPAREN expression RPAREN','statement',4,'p_statement_print','parser.py',13),
  ('statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE','statement',7,'p_statement_if','parser.py',17),
  ('statement -> IF LPAREN expression RPAREN LBRACE statements RBRACE ELSE LBRACE statements RBRACE','statement',11,'p_statement_if','parser.py',18),
  ('statements -> statement','statements',1,'p_statements','parser.py',26),
  ('statements -> statements statement','statements',2,'p_statements','parser.py',27),
  ('expression -> NEGACION expression','expression',2,'p_expression_logic','parser.py',32),
  ('expression -> expression AND expression','expression',3,'p_expression_logic','parser.py',33),
  ('expression -> expression OR expression','expression',3,'p_expression_logic','parser.py',34),
  ('expression -> expression PLUS expression','expression',3,'p_expression_binop','parser.py',44),
  ('expression -> expression MINUS expression','expression',3,'p_expression_binop','parser.py',45),
  ('expression -> expression MULTIPLY expression','expression',3,'p_expression_binop','parser.py',46),
  ('expression -> expression DIVIDE expression','expression',3,'p_expression_binop','parser.py',47),
  ('expression -> expression MOD expression','expression',3,'p_expression_binop','parser.py',48),
  ('expression -> LPAREN expression RPAREN','expression',3,'p_expression_group','parser.py',61),
  ('expression -> NUMBER','expression',1,'p_expression_number','parser.py',65),
  ('expression -> STRING','expression',1,'p_expression_string','parser.py',69),
  ('expression -> IDENTIFIER','expression',1,'p_expression_identifier','parser.py',73),
]
